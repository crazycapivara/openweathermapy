{
    "docs": [
        {
            "location": "/", 
            "text": "Openweathermapy\n\n\nPython package wrapping \nOpenWeatherMap.org's\n API 2.5.\n\n\n\n\nOverview\n\n\nAs \nOpenWeatherMap.org\n returns data mostly in the form of nested dictionaries,\n\nOpenweathermapy\n gives a simple API to access items in a comfortable way:\n\n\n# classic access\nitem = data[\nmain\n][\ntemp\n]\n\n# openweathermapy access\nitem = data(\nmain.temp\n)\n\n# access multiple items at once\n\n items = data(\nmain.temp\n, \nwind.speed\n)\n\n\n\n\n\n\nStatus\n\n\nDevelopment Beta\n\n\n\n\nVersion\n\n\n0.7.0\n\n\n\n\nChangelog\n\n\n\n\n2015-08-09\n optional \npandas.DataFrame\n support added for forecast and historical data\n\n\n\n\n\n\nRequirements\n\n\nOpenweathermapy\n supports Python 2.7, 3.2, 3.3 and 3.4. There are no more requirements,\nbut for forecast and historical data \npandas.DataFrame\n objects can be returned.\nSo it is cool to install \nPandas\n as well but it is not madatory. \n\n\n\n\nInstallation\n\n\n# via pip\n~$ pip install openweathermapy\n\n# or download package and run ...\n~$ python setup.py install\n\n\n\n\n\n\nGetting started\n\n\n import openweathermapy.core as owm\n\n\n\n\nAll parameters defined in \nOpenWeatherMap.org's\n API documentation can be passed to the functions\nin \nOpenweathermapy\n as keyword arguments \n**params\n.\nThe query string always depends on the request (API call), but unsupported parameters will  not raise an error.\nMost common ones to be used are \nunits\n, \nlang\n and (if needed) \nAPPID\n. So it may be a good idea to pass them\nin the form of a settings dictionary:\n\n\n settings = {\nunits\n: \nmetric\n, \nlang\n: \nDE\n}\n\n data = owm.get_current(\nKassel,DE\n, **settings)\n\n# settings containing APIKEY\n\n settings = {\nAPPID\n: 1111111111, \nunits\n: \nmetric\n}\n\n\n\n\nData objects\n\n\nThe main data object is \nopenweathermapy.utils.NestedDict\n, which extends Python's builtin \ndict\n \nby methods giving a more flexible access to the items as shown above. If a list of weather data (objects) is returned\n\nopenweathermapy.utils.NestedDictList\n or \nopenweathermapy.core.DataBlock\n is used. The latter one just adds\nan attribute \nmeta\n to the \nNestedDictList\n containing the meta data of the responses:\n\n\n# get current weather data (data point)\n\n data = owm.get_current(\nKassel,DE\n)\n\n type(data)\nopenweathermapy.utils.NestedDict\n\n# get forecast data (data block)\n\n data = owm.get_forecast_daily(\nLondon,UK\n)\n\n type(data)\nopenweathermapy.core.DataBlock\n\n\ntype(data.meta)\nopenweathermapy.utils.NestedDict\n\n\n\n\nViews\n\n\nA \nview\n is just a list of keys to extract data from the responses. So, you can define views like \nsummary\n,\n\nminimal\n etc. depending on your needs. This keeps everything as flexible as possible:\n\n\n views = {\n...    \nsummary\n: [\nmain.temp\n, \nmain.pressure\n, \nmain.humidity\n]\n... }\n\n\n data = owm.get_current(\nLondon,UK\n, units=\nmetric\n)\n\n data(*views[\nsummary\n])\n(18.56, 1011, 63)\n\n# return complete keys\n\n data.get_dict(views[\nsummary\n])\n{'main.temp': 18.56, 'main.humidity': 63, 'main.pressure': 1011}\n\n# return only last key\n\n data.get_dict(views[\nsummary\n], split_keys=True)\n{'pressure': 1011, 'temp': 18.56, 'humidity': 63} \n\n\n\n\nYou can also load views from files in \njson\n format for example by using \nopenweathermapy.utils.load_config\n.\n\n\nFetch current weather data\n\n\nThe \ncity\n argument can be given as \nname\n, \nid\n, or \ngeographic coordinates\n.\nIf you want to stay as close as possible to the original API, you can also skip the\nfirst argument and use the parameters \nq\n, \nid\n, \nlat\n and \nlon\n or \nzip\n instead,\nfor details see \nOpenWeatherMap.org's\n API documentation:\n\n\n# get data by city name and country code\n\n data = owm.get_current(\nKassel,DE\n)\n\n# get data by city id and set language to german (DE)\n\n data = owm.get_current(2892518, lang=\nDE\n)\n\n# get data by latitude and longitude and return temperatures in Celcius\n\n location = (51.32, 9.5)\n\n data = owm.get_current(location, units=\nmetric\n)\n\n# optional: skip city argument and get data by zip code\n\n data = owm.get_current(zip=\n34128,DE\n) \n\n# access single item\n\n data(\nmain.temp\n)\n11.06\n\n# access multiple items at once\n\n keys = [\nmain.temp\n, \nmain.humidity\n, \nwind.speed\n]\n\n data.get_many(keys)\n(11.06, 58, 6.2)\n\n# alternative access\n\n data(*keys)\n(11.06, 58, 6.2)\n\n# get data for 'Kassel,DE', 'Malaga,ES', 'New York,US'\n\n city_ids = (2892518, 2514256, 5128581)\n\n data = owm.get_current_for_group(city_ids, units=\nmetric\n, lang=\nDE\n)\n\n data_malaga = data[1]\n\n# find city by name and return data for match(es)\n\n data = owm.find_city(\nMalaga\n)\n\n# get data for 5 cities around geographic coordinates\n\n location = (51.32, 9.5)\n\n data = owm.find_cities_by_geo_coord(location, 5)\n\n# get data from station\n\n data = owm.get_current_from_station(4926)\n\n# get stations by geographic coordinates\n\n location = (51.32, 9.5)\n\n data = owm.find_stations_by_geo_coord(location)\n\n\n\n\nFetch forecast data\n\n\nThe \ncity\n can be given in the same way as shown in the examples above.  \n\n\n# get 3h forecast data\n\n data = owm.get_forecast_hourly(\nKassel,DE\n, lang=\nDE\n)\n\n# get daily forecast data for 7 days\n\n data = owm.get_forecast_daily(\nKassel,DE\n, 7, units=\nmetric\n)\n\n# show meta data\n\n data.meta\n{u'city': {u'country': u'DE', u'population': 0, u'id': 2892518,\nu'coord': {u'lat': 51.316669, u'lon': 9.5}, u'name': u'Kassel'},\nu'message': 0.0185, u'cod': u'200', u'cnt': 7}\n\n# get coordinates and id\n\n data.meta(\ncity.coord\n, \ncity.id\n)\n({u'lat': 51.316669, u'lon': 9.5}, 2892518)\n\n# select columns\n\n selection = data.select([\ndt\n, \ntemp.min\n, \ntemp.max\n])\n\n for line in selection:\n...    line \n...\n(1437044400, 16.63, 24.99)\n(1437130800, 18.21, 30.17)\n(1437217200, 14.96, 26.35)\n(1437303600, 15.82, 23.49)\n(1437390000, 15.52, 23.95)\n(1437476400, 18.77, 29.11)\n(1437562800, 14.67, 27.11)\n\n# convert column \ndt\n to datetime string\n\n from datetime import datetime as dt\n\n conv = {\ndt\n: lambda ts: str(dt.utcfromtimestamp(ts))}\n\n\n selection = data.select([\ndt\n, \ntemp.min\n, \ntemp.max\n], converters=conv)\n\n for line in selection:\n...    line \n...\n('2015-07-16 11:00:00', 16.63, 24.99)\n('2015-07-17 11:00:00', 18.21, 30.17)\n('2015-07-18 11:00:00', 14.96, 26.35)\n('2015-07-19 11:00:00', 15.82, 23.49)\n('2015-07-20 11:00:00', 15.52, 23.95)\n('2015-07-21 11:00:00', 18.77, 29.11)\n('2015-07-22 11:00:00', 14.67, 27.11)\n\n\n\n\nFetch historical data\n\n\nFor a complete list of parameters, which can be passed,\nplease refer to \nOpenWeatherMap.org's\n API documention. \n\n\n# get historical data by city name\n\n data = owm.get_history(\nKassel,DE\n)\n\n# define time period\n\n from datetime import datetime as dt\n\n date_s = dt(2015, 4, 1).timestamp()\n\n date_e = dt(2015, 4, 6).timestamp()\n\n# get historical data for given time period by city id\n\n data = owm.get_history(2892518, start=date_s, end=date_e)\n\n# give start date and number of hours to be retured\n\n data = owm.get_history(\nLondon,UK\n, start=date_s, cnt=48)\n\n# get historical data from station\n\n data = owm.get_history_from_station(4926)\n\n\n\n\nPandas support\n\n\nSince Openweathermapy version 0.7.0\n\n\nFor forecast and historical data it is possible to get \npandas.DataFrame\n objects from the responses:\n\n\n data = owm.get_forecast_daily(\nLondon,UK\n)\n\n# keys will be used as column names\n\n selection = data.select_pandas([\ndt\n, \nmain.temp\n, \nwind.speed\n])\n\n selection.set_index(\ndt\n)\n\n# it is also possible to pass an index column to the function\n\n dates = data.get(\ndt\n)\n\n selection = data.select_pandas([\nmain.temp\n, \nwind.speed\n], index=dates)\n\n\n selection.to_csv()", 
            "title": "Home"
        }, 
        {
            "location": "/#openweathermapy", 
            "text": "Python package wrapping  OpenWeatherMap.org's  API 2.5.", 
            "title": "Openweathermapy"
        }, 
        {
            "location": "/#overview", 
            "text": "As  OpenWeatherMap.org  returns data mostly in the form of nested dictionaries, Openweathermapy  gives a simple API to access items in a comfortable way:  # classic access\nitem = data[ main ][ temp ]\n\n# openweathermapy access\nitem = data( main.temp )\n\n# access multiple items at once  items = data( main.temp ,  wind.speed )", 
            "title": "Overview"
        }, 
        {
            "location": "/#status", 
            "text": "Development Beta", 
            "title": "Status"
        }, 
        {
            "location": "/#version", 
            "text": "0.7.0", 
            "title": "Version"
        }, 
        {
            "location": "/#changelog", 
            "text": "2015-08-09  optional  pandas.DataFrame  support added for forecast and historical data", 
            "title": "Changelog"
        }, 
        {
            "location": "/#requirements", 
            "text": "Openweathermapy  supports Python 2.7, 3.2, 3.3 and 3.4. There are no more requirements,\nbut for forecast and historical data  pandas.DataFrame  objects can be returned.\nSo it is cool to install  Pandas  as well but it is not madatory.", 
            "title": "Requirements"
        }, 
        {
            "location": "/#installation", 
            "text": "# via pip\n~$ pip install openweathermapy\n\n# or download package and run ...\n~$ python setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/#getting-started", 
            "text": "import openweathermapy.core as owm  All parameters defined in  OpenWeatherMap.org's  API documentation can be passed to the functions\nin  Openweathermapy  as keyword arguments  **params .\nThe query string always depends on the request (API call), but unsupported parameters will  not raise an error.\nMost common ones to be used are  units ,  lang  and (if needed)  APPID . So it may be a good idea to pass them\nin the form of a settings dictionary:   settings = { units :  metric ,  lang :  DE }  data = owm.get_current( Kassel,DE , **settings)\n\n# settings containing APIKEY  settings = { APPID : 1111111111,  units :  metric }", 
            "title": "Getting started"
        }, 
        {
            "location": "/#data-objects", 
            "text": "The main data object is  openweathermapy.utils.NestedDict , which extends Python's builtin  dict  \nby methods giving a more flexible access to the items as shown above. If a list of weather data (objects) is returned openweathermapy.utils.NestedDictList  or  openweathermapy.core.DataBlock  is used. The latter one just adds\nan attribute  meta  to the  NestedDictList  containing the meta data of the responses:  # get current weather data (data point)  data = owm.get_current( Kassel,DE )  type(data)\nopenweathermapy.utils.NestedDict\n\n# get forecast data (data block)  data = owm.get_forecast_daily( London,UK )  type(data)\nopenweathermapy.core.DataBlock type(data.meta)\nopenweathermapy.utils.NestedDict", 
            "title": "Data objects"
        }, 
        {
            "location": "/#views", 
            "text": "A  view  is just a list of keys to extract data from the responses. So, you can define views like  summary , minimal  etc. depending on your needs. This keeps everything as flexible as possible:   views = {\n...     summary : [ main.temp ,  main.pressure ,  main.humidity ]\n... }  data = owm.get_current( London,UK , units= metric )  data(*views[ summary ])\n(18.56, 1011, 63)\n\n# return complete keys  data.get_dict(views[ summary ])\n{'main.temp': 18.56, 'main.humidity': 63, 'main.pressure': 1011}\n\n# return only last key  data.get_dict(views[ summary ], split_keys=True)\n{'pressure': 1011, 'temp': 18.56, 'humidity': 63}   You can also load views from files in  json  format for example by using  openweathermapy.utils.load_config .", 
            "title": "Views"
        }, 
        {
            "location": "/#fetch-current-weather-data", 
            "text": "The  city  argument can be given as  name ,  id , or  geographic coordinates .\nIf you want to stay as close as possible to the original API, you can also skip the\nfirst argument and use the parameters  q ,  id ,  lat  and  lon  or  zip  instead,\nfor details see  OpenWeatherMap.org's  API documentation:  # get data by city name and country code  data = owm.get_current( Kassel,DE )\n\n# get data by city id and set language to german (DE)  data = owm.get_current(2892518, lang= DE )\n\n# get data by latitude and longitude and return temperatures in Celcius  location = (51.32, 9.5)  data = owm.get_current(location, units= metric )\n\n# optional: skip city argument and get data by zip code  data = owm.get_current(zip= 34128,DE ) \n\n# access single item  data( main.temp )\n11.06\n\n# access multiple items at once  keys = [ main.temp ,  main.humidity ,  wind.speed ]  data.get_many(keys)\n(11.06, 58, 6.2)\n\n# alternative access  data(*keys)\n(11.06, 58, 6.2)\n\n# get data for 'Kassel,DE', 'Malaga,ES', 'New York,US'  city_ids = (2892518, 2514256, 5128581)  data = owm.get_current_for_group(city_ids, units= metric , lang= DE )  data_malaga = data[1]\n\n# find city by name and return data for match(es)  data = owm.find_city( Malaga )\n\n# get data for 5 cities around geographic coordinates  location = (51.32, 9.5)  data = owm.find_cities_by_geo_coord(location, 5)\n\n# get data from station  data = owm.get_current_from_station(4926)\n\n# get stations by geographic coordinates  location = (51.32, 9.5)  data = owm.find_stations_by_geo_coord(location)", 
            "title": "Fetch current weather data"
        }, 
        {
            "location": "/#fetch-forecast-data", 
            "text": "The  city  can be given in the same way as shown in the examples above.    # get 3h forecast data  data = owm.get_forecast_hourly( Kassel,DE , lang= DE )\n\n# get daily forecast data for 7 days  data = owm.get_forecast_daily( Kassel,DE , 7, units= metric )\n\n# show meta data  data.meta\n{u'city': {u'country': u'DE', u'population': 0, u'id': 2892518,\nu'coord': {u'lat': 51.316669, u'lon': 9.5}, u'name': u'Kassel'},\nu'message': 0.0185, u'cod': u'200', u'cnt': 7}\n\n# get coordinates and id  data.meta( city.coord ,  city.id )\n({u'lat': 51.316669, u'lon': 9.5}, 2892518)\n\n# select columns  selection = data.select([ dt ,  temp.min ,  temp.max ])  for line in selection:\n...    line \n...\n(1437044400, 16.63, 24.99)\n(1437130800, 18.21, 30.17)\n(1437217200, 14.96, 26.35)\n(1437303600, 15.82, 23.49)\n(1437390000, 15.52, 23.95)\n(1437476400, 18.77, 29.11)\n(1437562800, 14.67, 27.11)\n\n# convert column  dt  to datetime string  from datetime import datetime as dt  conv = { dt : lambda ts: str(dt.utcfromtimestamp(ts))}  selection = data.select([ dt ,  temp.min ,  temp.max ], converters=conv)  for line in selection:\n...    line \n...\n('2015-07-16 11:00:00', 16.63, 24.99)\n('2015-07-17 11:00:00', 18.21, 30.17)\n('2015-07-18 11:00:00', 14.96, 26.35)\n('2015-07-19 11:00:00', 15.82, 23.49)\n('2015-07-20 11:00:00', 15.52, 23.95)\n('2015-07-21 11:00:00', 18.77, 29.11)\n('2015-07-22 11:00:00', 14.67, 27.11)", 
            "title": "Fetch forecast data"
        }, 
        {
            "location": "/#fetch-historical-data", 
            "text": "For a complete list of parameters, which can be passed,\nplease refer to  OpenWeatherMap.org's  API documention.   # get historical data by city name  data = owm.get_history( Kassel,DE )\n\n# define time period  from datetime import datetime as dt  date_s = dt(2015, 4, 1).timestamp()  date_e = dt(2015, 4, 6).timestamp()\n\n# get historical data for given time period by city id  data = owm.get_history(2892518, start=date_s, end=date_e)\n\n# give start date and number of hours to be retured  data = owm.get_history( London,UK , start=date_s, cnt=48)\n\n# get historical data from station  data = owm.get_history_from_station(4926)", 
            "title": "Fetch historical data"
        }, 
        {
            "location": "/#pandas-support", 
            "text": "Since Openweathermapy version 0.7.0  For forecast and historical data it is possible to get  pandas.DataFrame  objects from the responses:   data = owm.get_forecast_daily( London,UK )\n\n# keys will be used as column names  selection = data.select_pandas([ dt ,  main.temp ,  wind.speed ])  selection.set_index( dt )\n\n# it is also possible to pass an index column to the function  dates = data.get( dt )  selection = data.select_pandas([ main.temp ,  wind.speed ], index=dates)  selection.to_csv()", 
            "title": "Pandas support"
        }
    ]
}